<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VMware安装+Linux操作系统搭建记录(VMware16 + Ubuntu18.04-desktop)</title>
    <link href="/2025/03/04/VMware%E5%AE%89%E8%A3%85-Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95-VMware16-Ubuntu18-04-desktop/"/>
    <url>/2025/03/04/VMware%E5%AE%89%E8%A3%85-Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95-VMware16-Ubuntu18-04-desktop/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware安装-Linux操作系统搭建记录-VMware16-Ubuntu18-04-desktop"><a href="#VMware安装-Linux操作系统搭建记录-VMware16-Ubuntu18-04-desktop" class="headerlink" title="VMware安装+Linux操作系统搭建记录(VMware16 + Ubuntu18.04-desktop)"></a>VMware安装+Linux操作系统搭建记录(VMware16 + Ubuntu18.04-desktop)</h1><h2 id="一、VMware虚拟机安装"><a href="#一、VMware虚拟机安装" class="headerlink" title="一、VMware虚拟机安装"></a>一、VMware虚拟机安装</h2><h3 id="1-下载vmware16安装包"><a href="#1-下载vmware16安装包" class="headerlink" title="1. 下载vmware16安装包"></a>1. 下载vmware16安装包</h3><p>网上很多资源，这次顺手存一下到自己的百度网盘里了。  </p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>（1）双击下载好的.exe程序开始安装  </p><p>（2）点击下一步<br><img src="/../img/vmUbuntu/1.png" alt="1">  </p><p>（3）勾选同意后下一步<br><img src="/../img/vmUbuntu/2.png" alt="2">  </p><p>（4）更改VMware的安装位置，不建议放系统盘（C），更改后点下一步（可以自己创建一个虚拟机安装目录存到对应目录下）<br><img src="/../img/vmUbuntu/3.png" alt="3">  </p><p>（5）不勾选直接下一步<br><img src="/../img/vmUbuntu/4.png" alt="4">  </p><p>（6）直接下一步<br><img src="/../img/vmUbuntu/5.png" alt="5">  </p><p>（7）点击安装<br><img src="/../img/vmUbuntu/6.png" alt="6">    </p><p>（8）等待安装完成（需要等待一会儿，尤其是在安装网络驱动时）<br><img src="/../img/vmUbuntu/7.png" alt="7">     </p><p>（9）点击许可证<br><img src="/../img/vmUbuntu/8.png" alt="8">   </p><p>（10）输入许可证——拷贝许可证到输入框里即可：<strong>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</strong><br><img src="/../img/vmUbuntu/9.png" alt="9">     </p><p>（11）点击完成，这样就安装完成了<br><img src="/../img/vmUbuntu/10.png" alt="10">  </p><h2 id="二、安装Linux操作系统"><a href="#二、安装Linux操作系统" class="headerlink" title="二、安装Linux操作系统"></a>二、安装Linux操作系统</h2><h3 id="1-下载镜像源："><a href="#1-下载镜像源：" class="headerlink" title="1. 下载镜像源："></a>1. 下载镜像源：</h3><p>Linux操作系统有很多版本，本次搭建我使用的是从清华大学开源软件镜像网站<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/</a>下载的Ubuntu18.04：<br><img src="/../img/vmUbuntu/11.png" alt="11">   </p><h3 id="2-开始安装操作系统"><a href="#2-开始安装操作系统" class="headerlink" title="2. 开始安装操作系统"></a>2. 开始安装操作系统</h3><p>（1）用管理员身份打开虚拟机软件<br><img src="/../img/vmUbuntu/12.png" alt="12"> </p><p>（2）点击创建虚拟机<br><img src="/../img/vmUbuntu/13.png" alt="13"> </p><p>（3）使用典型配置，点击下一步<br><img src="/../img/vmUbuntu/14.png" alt="14"> </p><p>（4）选择稍后安装操作系统，点击下一步<br><img src="/../img/vmUbuntu/15.png" alt="15"> </p><p>（5）选择linux，并选择ubuntu64位<br><img src="/../img/vmUbuntu/16.png" alt="16"> </p><p>（6）选择一个存放虚拟机的地方，不要选择VMware的安装目录（重新创建一个目录来存放）<br><img src="/../img/vmUbuntu/17.png" alt="17"> </p><p>（7）设定磁盘大小为40GB，并选择为单个文件<br><img src="/../img/vmUbuntu/18.png" alt="18"> </p><p>（8）点击完成<br><img src="/../img/vmUbuntu/19.png" alt="19"> </p><p>（9）在主机界面点击编辑虚拟机设置<br><img src="/../img/vmUbuntu/20.png" alt="20"> </p><p>（10）点击内存，设置虚拟机内存为4096MB<br><img src="/../img/vmUbuntu/21.png" alt="21"> </p><p>（11）点击处理器，设置处理器数量为2<br><img src="/../img/vmUbuntu/22.png" alt="22"> </p><p>（12）点击CD&#x2F;DVD ，勾选使用ISO映像文件，并选择下载好的镜像文件路径（参考教材中用的是Ubuntu20，选择自己的镜像文件就好了）<br><img src="/../img/vmUbuntu/23.png" alt="23"> </p><p>（13）点击USB控制器，点击移除<br><img src="/../img/vmUbuntu/24.png" alt="24"> </p><p>（14）点击打印机，点击移除，点击确定<br><img src="/../img/vmUbuntu/25.png" alt="25"> </p><h2 id="三、开启虚拟机并安装VMwareTools"><a href="#三、开启虚拟机并安装VMwareTools" class="headerlink" title="三、开启虚拟机并安装VMwareTools"></a>三、开启虚拟机并安装VMwareTools</h2><h3 id="1-开启此虚拟机"><a href="#1-开启此虚拟机" class="headerlink" title="1. 开启此虚拟机"></a>1. 开启此虚拟机</h3><p><img src="/../img/vmUbuntu/26.png" alt="26"> </p><p>等待校验完成<br><img src="/../img/vmUbuntu/27.png" alt="27"> </p><p>选择install ubuntu<br><img src="/../img/vmUbuntu/28.png" alt="28"> </p><p>选择英语键盘，然后continue<br><img src="/../img/vmUbuntu/29.png" alt="29"> </p><p>Normal installation，不勾选安装时更新，按下continue<br><img src="/../img/vmUbuntu/30.png" alt="30"> </p><p>直接点击Install Now<br><img src="/../img/vmUbuntu/31.png" alt="31"> </p><p>直接continue<br><img src="/../img/vmUbuntu/32.png" alt="32"> </p><p>选择地点为shanghai<br><img src="/../img/vmUbuntu/33.png" alt="33"> </p><p>设置用户名和密码<br><img src="/../img/vmUbuntu/34.png" alt="34"> </p><p>等待一会<br><img src="/../img/vmUbuntu/35.png" alt="35"> </p><p>直接Restart Now<br><img src="/../img/vmUbuntu/36.png" alt="36"> </p><p>当出现Please remove the installation medium, then press Enter时，按下快捷键ctrl+alt，将鼠标从虚拟机转换到主机。并点击虚拟机-&gt;设置<br><img src="/../img/vmUbuntu/37.png" alt="37"> </p><p>点击CD&#x2F;DVD 并勾选使用物理驱动器<br><img src="/../img/vmUbuntu/38.png" alt="38"> </p><p>若出现以下情况则选择“是”<br><img src="/../img/vmUbuntu/39.png" alt="39"> </p><p>再回到虚拟机中按Enter<br><img src="/../img/vmUbuntu/40.png" alt="40"> </p><p>点击自己账户，并输入账户密码<br><img src="/../img/vmUbuntu/41.png" alt="41"> </p><p>退出欢迎界面<br><img src="/../img/vmUbuntu/42.png" alt="42"> </p><p>暂时不更新，点击Remind Me Later<br><img src="/../img/vmUbuntu/43.png" alt="43"> </p><p>在屏幕中右键，点击Open in Terminal<br><img src="/../img/vmUbuntu/44.png" alt="44"> </p><p>输入ping -c 4 <a href="http://www.baidu.com,检查网络是否连通/">www.baidu.com，检查网络是否连通</a><br><img src="/../img/vmUbuntu/45.png" alt="45"> </p><h3 id="2-安装VMware-Tools"><a href="#2-安装VMware-Tools" class="headerlink" title="2. 安装VMware Tools"></a>2. 安装VMware Tools</h3><p><strong>背景：</strong><br>在Ubuntu 18.04安装完之后会发现此时的Ubuntu Desktop 并不能在VMware中全屏显示，不能自适应vm; 且无法实现主机到虚拟机的双向复制粘贴。  </p><p><strong>接下来是可以永久自适应vm的解决办法：</strong>  </p><ul><li>（1）首先在终端执行命令sudo apt-get update</li><li>（2）接下来安装vm-tools，在终端执行以下命令：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools-desktop<br></code></pre></td></tr></table></figure>安装过程当中，除了输入yes确认外一直按enter键确定即可；</li></ul><p>（3）安装完成后，执行以下操作（见下图）：<br><img src="/../img/vmUbuntu/46.png" alt="46">   </p><p>（4）终端执行重启命令，此时就已经自适应了:   </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h2 id="四、参考文章："><a href="#四、参考文章：" class="headerlink" title="四、参考文章："></a>四、参考文章：</h2><ul><li><a href="https://laoshisan.blog.csdn.net/article/details/121434777?fromshare=blogdetail&sharetype=blogdetail&sharerId=121434777&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">虚拟机安装ubuntu后屏幕无法自适应vm窗口大小</a></li></ul><h3 id="！！！！！特殊说明："><a href="#！！！！！特殊说明：" class="headerlink" title="！！！！！特殊说明："></a><strong>！！！！！特殊说明：</strong></h3><p>文档内容只是自己的学习记录，在前辈分享的教程以及网上找到的教程基础上完成的搭建，很多都是CV工程，包括截图偷懒不想回头重新截一次就CV了（知识的搬运工）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VMware16 + Ubuntu18.04-live-server搭建记录</title>
    <link href="/2025/03/04/VMware16-Ubuntu18-04-live-server%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/04/VMware16-Ubuntu18-04-live-server%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware16-Ubuntu18-04-live-server搭建记录"><a href="#VMware16-Ubuntu18-04-live-server搭建记录" class="headerlink" title="VMware16 + Ubuntu18.04-live-server搭建记录"></a>VMware16 + Ubuntu18.04-live-server搭建记录</h1><p><strong>前言：</strong><br>之前VMware16已经安装好了，接下来直接进行Ubuntu18.04-live-server的安装。  </p><h2 id="1-下载镜像源"><a href="#1-下载镜像源" class="headerlink" title="1. 下载镜像源"></a>1. 下载镜像源</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/">清华大学开源软件镜像站https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/</a>  </p><h2 id="2-开始安装配置"><a href="#2-开始安装配置" class="headerlink" title="2. 开始安装配置"></a>2. 开始安装配置</h2><p>（1）点击“创建新的虚拟机”，弹出“新虚拟机向导页面”（如下），选择自定义（高级），下一步：<br><img src="/../img/vmUbuntu/47.png" alt="47">   </p><p>（2）下一步<br><img src="/../img/vmUbuntu/48.png" alt="48">   </p><p>（3）点击“稍后安装”，下一步<br><img src="/../img/vmUbuntu/49.png" alt="49">   </p><p>（4）选择“Linux”，版本选择“Ubuntu64位”，下一步<br><img src="/../img/vmUbuntu/50.png" alt="50">    </p><p>（5）命名虚拟机，与之前的desktop版本区分：<br><img src="/../img/vmUbuntu/51.png" alt="51">    </p><p>（6）处理器配置默认，下一步<br><img src="/../img/vmUbuntu/52.png" alt="52">   </p><p>（7）内存设置保持4096，下一步<br><img src="/../img/vmUbuntu/53.png" alt="53">            </p><p>（8）网络类型设置NAT模式（服务器版本可以选择使用桥接网络方便连接，桌面版一般选择NAT模式，但后续也可更改设置），下一步；<br><img src="/../img/vmUbuntu/54.png" alt="54">       </p><p>（9）“I&#x2F;O控制器类型”选择“LSI Logic”，下一步<br><img src="/../img/vmUbuntu/55.png" alt="55">      </p><p>（10）“选择磁盘类型”选择“SCSI”，下一步<br><img src="/../img/vmUbuntu/56.png" alt="56">      </p><p>（11）“选择磁盘” 选择“创建新虚拟磁盘”，下一步<br><img src="/../img/vmUbuntu/57.png" alt="57">  </p><p>（12）“指定磁盘容量”根据个人需求这只大小 先选择默认，下一步<br><img src="/../img/vmUbuntu/58.png" alt="58">     </p><p>（13）直接下一步（文件存放路径默认放在准备好的空文件夹，并无大碍）<br><img src="/../img/vmUbuntu/59.png" alt="59">  </p><p>（14）点击“自定义硬件”<br><img src="/../img/vmUbuntu/60.png" alt="60">    </p><p>（15）点击点击 “新CD&#x2F;DVD(SATA)”，然后点击“使用ISO映像文件”，接着浏览选择准备好的镜像文件<br><img src="/../img/vmUbuntu/61.png" alt="61">    </p><p>（16）然后点击关闭：<br><img src="/../img/vmUbuntu/62.png" alt="62">    </p><p>（17）点击完成，虚拟机就安装完成了！<br><img src="/../img/vmUbuntu/63.png" alt="63">    </p><p>（18）然后可以在虚拟机页面看到新的虚拟机<br><img src="/../img/vmUbuntu/64.png" alt="64">    </p><p>（19）开启虚拟机 Ubuntu-live-server18.04<br><img src="/../img/vmUbuntu/65.png" alt="65">    </p><p>（20）跳转到选择语言界面，通过上下键选择“English”<br><img src="/../img/vmUbuntu/66.png" alt="66">    </p><p>（21）这里页面要选择更新安装程序，通过上下键选择 “continue without updating”然后选择 Enter（回车）：<br><img src="/../img/vmUbuntu/67.png" alt="67">    </p><p>（22）然后选择Done<br><img src="/../img/vmUbuntu/68.png" alt="68">    </p><p>（23）这里是网络连接说明，创建虚拟机选择NAT 系统默认分配好了IP 不用修改，直接默认，上下键 “Done”， Enter （回车）：<br><img src="/../img/vmUbuntu/69.png" alt="69">    </p><p>（24）这里选择代理服务器，刚才选择了NAT模式进行连接外网，所以可以默认空，上下键“Done”，Enter （回车）：<br><img src="/../img/vmUbuntu/70.png" alt="70">     </p><p>（25）这里选择镜像地址 （自动识别）默认值即可，上下键“Done”，回车确认：<br><img src="/../img/vmUbuntu/71.png" alt="71">     </p><p>（26）这里是存储配置 默认即可<br><img src="/../img/vmUbuntu/72.png" alt="72">     </p><p>（27）这里是自动分配存储配置， 默认即可，上下键“Done”，回车：<br><img src="/../img/vmUbuntu/73.png" alt="73">     </p><p>（28）这里是对磁盘整理安装前的提示，“Continue”，回车：<br><img src="/../img/vmUbuntu/74.png" alt="74">     </p><p>（29）设置自己的账户密码，设置完成后，选择“Done”，回车：<br><img src="/../img/vmUbuntu/75.png" alt="75">     </p><p>（30）作为服务器使用，安装ssh，先选择“No”跳过，后面自己安装<br><img src="/../img/vmUbuntu/76.png" alt="76">     </p><p>（31）先跳过<br><img src="/../img/vmUbuntu/77.png" alt="77">     </p><p>（32）等待安装完成<br><img src="/../img/vmUbuntu/78.png" alt="78">     </p><p>（33）完成，点击重启<br><img src="/../img/vmUbuntu/79.png" alt="79">     </p><p>（34）出现如下问题<br><img src="/../img/vmUbuntu/80.png" alt="80">   </p><p>（35）进入虚拟机设置，取消勾选“启动时连接”<br><img src="/../img/vmUbuntu/81.png" alt="81">   </p><p>（36）确认<br><img src="/../img/vmUbuntu/82.png" alt="82">   </p><p>（37）登录普通用户<br><img src="/../img/vmUbuntu/83.png" alt="83">   </p><p>（38）设置root用户密码<br><img src="/../img/vmUbuntu/84.png" alt="84">   </p><h2 id="3-安装VMware-Tools"><a href="#3-安装VMware-Tools" class="headerlink" title="3. 安装VMware Tools"></a>3. 安装VMware Tools</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools<br></code></pre></td></tr></table></figure><p><img src="/../img/vmUbuntu/85.png" alt="85">   </p><p>更新安装包<br><img src="/../img/vmUbuntu/86.png" alt="86">   </p><h2 id="4-基本完成！"><a href="#4-基本完成！" class="headerlink" title="4. 基本完成！"></a>4. 基本完成！</h2><p>服务器版本安装后当作服务器使用，通过远程ssh连接使用（工具：MobaXterm）   </p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul><li><a href="https://blog.csdn.net/weixin_64717288/article/details/127338136?fromshare=blogdetail&sharetype=blogdetail&sharerId=127338136&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">ubuntu 18.04 server安装（详细安装教程）</a>    </li><li><a href="https://blog.csdn.net/m0_47958289/article/details/117414891?fromshare=blogdetail&sharetype=blogdetail&sharerId=117414891&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">VMware安装Ubuntu18.04-Server图文教程</a>      </li><li><a href="https://blog.csdn.net/TianYanRen111/article/details/121434777">虚拟机安装ubuntu后屏幕无法自适应vm窗口大小</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Sphinx学习与使用记录（Windows）</title>
    <link href="/2025/03/04/Sphinx%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88Windows%EF%BC%89/"/>
    <url>/2025/03/04/Sphinx%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88Windows%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Sphinx学习与使用记录（Windows）"><a href="#Sphinx学习与使用记录（Windows）" class="headerlink" title="Sphinx学习与使用记录（Windows）"></a>Sphinx学习与使用记录（Windows）</h1><h2 id="一、Sphinx"><a href="#一、Sphinx" class="headerlink" title="一、Sphinx"></a>一、Sphinx</h2><p>Sphinx 是一个文档生成工具，用于将一组 reStructuredText 源文件组织成一个文档（如：HTML、PDF），并自动生成交叉引用、索引等。<br>reStructuredText 是一种轻量级纯文本标记语言，也被简称为：RST 或 reST，以 .rst 为扩展名的文件。</p><h2 id="二、安装Sphinx"><a href="#二、安装Sphinx" class="headerlink" title="二、安装Sphinx"></a>二、安装Sphinx</h2><h3 id="1、安装Python和pip"><a href="#1、安装Python和pip" class="headerlink" title="1、安装Python和pip"></a>1、安装Python和pip</h3><p>进入官网下载Python3安装包，点击.exe文件按指引安装即可（自定义安装目录）。<br>python官网：<a href="https://www.python.org/">https://www.python.org/</a><br><img src="/../img/sphinxLearn/pythonExe.jpg" alt="Python安装包"></p><h3 id="2、安装Sphinx"><a href="#2、安装Sphinx" class="headerlink" title="2、安装Sphinx"></a>2、安装Sphinx</h3><p>打开命令提示符（cmd），输入如下命令 :  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install Sphinx<br></code></pre></td></tr></table></figure><h3 id="3、创建工作目录并创建sphinx项目"><a href="#3、创建工作目录并创建sphinx项目" class="headerlink" title="3、创建工作目录并创建sphinx项目"></a>3、创建工作目录并创建sphinx项目</h3><h4 id="创建工作目录："><a href="#创建工作目录：" class="headerlink" title="创建工作目录："></a>创建工作目录：</h4><p>在D盘目录下建立一个 sphinx 目录, 又在其中建立了一个 try1目录用于测试，例如 D:\sphinx\try1</p><h4 id="使用在本地创建sphinx项目"><a href="#使用在本地创建sphinx项目" class="headerlink" title="使用在本地创建sphinx项目:"></a>使用在本地创建sphinx项目:</h4><p>然后从此目录进入cmd并启动sphinx （执行sphin-quickstart）以创建并配置工程, 整个过程命令表示如下:<br><img src="/../img/sphinxLearn/sphinxProjectCreate.jpg" alt="创建sphinx项目"></p><h4 id="进入文档资源配置对话框："><a href="#进入文档资源配置对话框：" class="headerlink" title="进入文档资源配置对话框："></a>进入文档资源配置对话框：</h4><p>询问的第一项: 设置文档的根目录,由于现在处于根目录, 所以使用默认的当前目录, 即直接回车使用默认设置即可;<br>询问的第二项: 希望把构建的最终文档目录放在哪儿,是放在”source”里创建成”_build”, 即 try1&#x2F;source&#x2F;_build ,还是放在根目录里创建成”build”, 即 try1&#x2F;build , 选择分离方便管理,所以输入 y. 如下图所示:<br><img src="/../img/sphinxLearn/separation.jpg" alt="分离source和build目录"></p><h4 id="输入项目名、作者名、项目版本号："><a href="#输入项目名、作者名、项目版本号：" class="headerlink" title="输入项目名、作者名、项目版本号："></a>输入项目名、作者名、项目版本号：</h4><p><img src="/../img/sphinxLearn/givename.jpg" alt="输入名称"></p><h4 id="选择文档语言"><a href="#选择文档语言" class="headerlink" title="选择文档语言"></a>选择文档语言</h4><p>文档语言默认是en，若要选择中文则输入zh_CN（简体中文），对应config.py文件内：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">language</span> = <span class="hljs-string">&#x27;zh_CN&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="创建完成："><a href="#创建完成：" class="headerlink" title="创建完成："></a>创建完成：</h4><p><img src="/../img/sphinxLearn/finish.jpg" alt="完成创建项目"></p><p>项目创建后目录结构如下所示：<br><img src="/../img/sphinxLearn/structure.jpg" alt="项目目录结构"></p><p><strong>以下为各个文件的详细说明：</strong>  </p><p><strong>1.Makefile：</strong> 编译过代码的开发人员应该非常熟悉这个文件，如果不熟悉，那么可以将它看作是一个包含指令的文件，在使用 make 命令时，可以使用这些指令来构建文档输出。 </p><p><strong>2._build：</strong> 这是触发特定输出后用来存放所生成的文件的目录。  </p><p><strong>3._static：</strong> 所有不属于源代码（如图像）一部分的文件均存放于此处，稍后会在构建目录中将它们链接在一起。  </p><p><strong>4.conf.py：</strong> 这是一个 Python 文件，用于存放 Sphinx 的配置值，包括在终端执行 sphinx-quickstart 时选中的那些值。  </p><p><strong>5.index.rst：</strong> 文档项目的 root 目录。如果将文档划分为其他文件，该目录会连接这些文件。（index.rst 文件相当于文档的“目录树”或“目录根”）  </p><h4 id="利用make命令生成demo页面"><a href="#利用make命令生成demo页面" class="headerlink" title="利用make命令生成demo页面"></a>利用make命令生成demo页面</h4><p>回到project的主目录中，打开命令提示符并运行make html。<br><img src="/../img/sphinxLearn/make_html.jpg" alt="编译">  </p><p>生成完毕后，打开build&#x2F;html&#x2F;目录下的相应html文件，即可体验由Sphinx生成的静态页面。<br><img src="/../img/sphinxLearn/indexPage.jpg" alt="主页静态页面"> </p><h3 id="4、定义文档结构"><a href="#4、定义文档结构" class="headerlink" title="4、定义文档结构"></a>4、定义文档结构</h3><p>主文档index.rst的主要功能是被转换成欢迎页, 它包含一个目录表（ “table of contents tree”或者 toctree）。Sphinx 主要功能是使用 reStructuredText, 把许多文件组织成一份结构合理的文档。  </p><p>为文档新建内容文件，例如：test.md<br>可以在toctree下方添加文档列表<br><img src="/../img/sphinxLearn/index_fileStructure.jpg" alt="新建文件"> </p><p><strong>注意：</strong> 文档文件放在与index.rst同级目录下</p><h3 id="5、支持markdown文件、更改文档主题"><a href="#5、支持markdown文件、更改文档主题" class="headerlink" title="5、支持markdown文件、更改文档主题"></a>5、支持markdown文件、更改文档主题</h3><h4 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h4><p>Spinx本身不支持.md文件生成文档，需要我们使用第三方库recommonmark进行转换。 首先分别运行下列命令安装recommonmark与sphinx_rtd_theme库。  </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> recommonmark  <br><br>pip <span class="hljs-keyword">install</span> sphinx_rtd_theme    <br></code></pre></td></tr></table></figure><h4 id="修改config-py配置"><a href="#修改config-py配置" class="headerlink" title="修改config.py配置"></a>修改config.py配置</h4><p>安装好之后，在conf.py中修改下列两个配置以配置对markdown的支持：  </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">#指定HTML主题<br>html_theme = <span class="hljs-string">&#x27;sphinx_rtd_theme&#x27;</span><br><br>#-- 指定源文件扩展名列表-----<br><span class="hljs-keyword">from</span> recommonmark.parser <span class="hljs-keyword">import</span> CommonMarkParser<br><span class="hljs-keyword">import</span> sphinx_rtd_theme<br>source_suffix = [<span class="hljs-string">&#x27;.rst&#x27;</span>, <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;.MD&#x27;</span>]<br><br><br>#-- 将.md类型源文件解析器设置为CommonMark----------<br>source_parsers = &#123;<br>    <span class="hljs-string">&#x27;.md&#x27;</span>: CommonMarkParser,<br>    <span class="hljs-string">&#x27;.MD&#x27;</span>: CommonMarkParser,<br>&#125;<br></code></pre></td></tr></table></figure><p>添加扩展recommonmark：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加扩展</span><br>extensions = [<span class="hljs-string">&#x27;recommonmark&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="编译生成文档："><a href="#编译生成文档：" class="headerlink" title="编译生成文档："></a>编译生成文档：</h4><p>在Sphinx项目所在的文件夹路径下运行命令’make html’生成文档.<br><img src="/../img/sphinxLearn/mt2.png" alt="make-html2"> </p><p>生成后的文档位于build&#x2F;html文件夹内，用浏览器打开index.html即可看到生成后的文档：<br><img src="/../img/sphinxLearn/indexPage2.jpg" alt="new-themePage"> </p><p>至此，sphinx安装及项目创建完成。</p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><ul><li><a href="https://blog.hszofficial.site/recommend/2020/11/27/%E4%BD%BF%E7%94%A8Sphinx%E5%86%99%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/">使用Sphinx写项目文档</a>  </li><li><a href="https://zhuanlan.zhihu.com/p/27544821">用Sphinx快速制作文档</a>  </li><li><a href="https://www.osgeo.cn/sphinx-note/sphinx-setup.html#google_vignette">安装与使用Sphinx</a>  </li><li><a href="https://blog.csdn.net/weixin_40511249/article/details/127448107">Sphinx 入门及常见问题</a>  </li><li><a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法</a> </li><li><a href="https://www.sphinx-doc.org/en/master/usage/configuration.html">Sphinx</a></li><li><a href="https://sphinx-chinese-tutorial.readthedocs.io/en/latest/index.html">Sphinx 入门教程</a></li></ul><h3 id="6、Doxygen安装"><a href="#6、Doxygen安装" class="headerlink" title="6、Doxygen安装"></a>6、Doxygen安装</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>进入<a href="https://www.doxygen.nl/download.html">doxygen官网</a> 找到Windows GUI版直接下载就好：<br><img src="/../img/sphinxLearn/doxygen.png" alt="doxygen官网"> </p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://www.doxygen.nl/manual/doxygen_usage.html">Doxygen使用</a><br><a href="http://blog.sysu.tech/Tools/Doxygen%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97/">Doxygen入门指北</a></p><h3 id="7、使用vscod编写markdown文件"><a href="#7、使用vscod编写markdown文件" class="headerlink" title="7、使用vscod编写markdown文件"></a>7、使用vscod编写markdown文件</h3><p>在vscode中安装markdown相关插件：<br><img src="/../img/sphinxLearn/Plug_markdown.jpg" alt="wscode"> </p><p>安装完成后，新建.md后缀文件即可开始编写markdown文件。</p><h3 id="8、在项目内创建新文件"><a href="#8、在项目内创建新文件" class="headerlink" title="8、在项目内创建新文件"></a>8、在项目内创建新文件</h3><p>在index.rst同级目录下新建.md文件并编写文件内容，编写完成后，修改index.rst文件 —— 在toctree部分添加新建的.md文件：<br><img src="/../img/sphinxLearn/modify_index_rst.jpg" alt="修改index.rst"> </p><p>再执行make html即可生成对应的html文件到build目录下。</p><h3 id="9、添加图片"><a href="#9、添加图片" class="headerlink" title="9、添加图片"></a>9、添加图片</h3><p>在source&#x2F;_static&#x2F;目录下创建一个images目录存放本地图片。</p><h2 id="三、支持markdown表格"><a href="#三、支持markdown表格" class="headerlink" title="三、支持markdown表格"></a>三、支持markdown表格</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>安装markdown语法规则编写表格，编译后Markdown表格无法渲染</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">| <span class="hljs-title class_">Align</span> `left`   | center align |   <span class="hljs-title class_">Align</span> right |<br>| <span class="hljs-symbol">:-------------</span> | <span class="hljs-symbol">:----------</span>: | ------------: |<br>| `left`-aligned |   centered   | right-aligned |<br>| `左`对齐        |    中对齐     |         右对齐 |<br><br></code></pre></td></tr></table></figure><h3 id="2-可能的原因"><a href="#2-可能的原因" class="headerlink" title="2. 可能的原因"></a>2. 可能的原因</h3><h4 id="空行缺失导致表格解析失败"><a href="#空行缺失导致表格解析失败" class="headerlink" title="空行缺失导致表格解析失败"></a>空行缺失导致表格解析失败</h4><p>Markdown表格必须与上文内容隔开一个空行，否则解析器会将其识别为普通文本。</p><h4 id="recommonmark默认不支持GFM表格"><a href="#recommonmark默认不支持GFM表格" class="headerlink" title="recommonmark默认不支持GFM表格"></a>recommonmark默认不支持GFM表格</h4><p>recommonmark基于CommonMark规范，默认不完整支持GitHub Flavored Markdown（GFM）表格语法。需启用扩展（不推荐，建议改用myst-parser）：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">（<span class="hljs-number">1</span>）安装第三方扩展<br>pip install sphinx-markdown-tables<br><br>（<span class="hljs-number">2</span>）修改config.<span class="hljs-keyword">py</span>文件添加扩展<br># <span class="hljs-keyword">conf</span>.<span class="hljs-keyword">py</span><br>extensions = [<br>    <span class="hljs-string">&#x27;recommonmark&#x27;</span>,<br>    <span class="hljs-string">&#x27;sphinx_markdown_tables&#x27;</span>  <br>]<br></code></pre></td></tr></table></figure><h4 id="未正确配置Markdown解析器"><a href="#未正确配置Markdown解析器" class="headerlink" title="未正确配置Markdown解析器"></a>未正确配置Markdown解析器</h4><p>建议改用myst-parser替代recommonmark（更现代且维护活跃）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># x修改config.py文件</span><br><span class="hljs-attr">extensions</span> = [<span class="hljs-string">&#x27;myst_parser&#x27;</span>]<br><span class="hljs-attr">source_suffix</span> = [<span class="hljs-string">&#x27;.rst&#x27;</span>, <span class="hljs-string">&#x27;.md&#x27;</span>,<span class="hljs-string">&#x27;.MD&#x27;</span>]<br><br><span class="hljs-comment"># 删除旧版recommonmark相关配置</span><br><span class="hljs-comment"># source_parsers = &#123;&#x27;.md&#x27;: CommonMarkParser,&#x27;.MD&#x27;: CommonMarkParser,&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Sourceinsight安装记录</title>
    <link href="/2025/03/04/Sourceinsight%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/04/Sourceinsight%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Sourceinsight安装记录"><a href="#Sourceinsight安装记录" class="headerlink" title="Sourceinsight安装记录"></a>Sourceinsight安装记录</h1><h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p><a href="https://www.ddooo.com/softdown/197204.htm">下载安装包地址：https://www.ddooo.com/softdown/197204.htm</a><br><img src="/../img/sourceinsight/1.png" alt="1"></p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><ol><li><p>点击.exe文件安装，并点击next<br><img src="/../img/sourceinsight/2.png" alt="2"></p></li><li><p>选择红框accept后点击Next<br><img src="/../img/sourceinsight/3.png" alt="3"></p></li><li><p>修改安装目录，OK确认后next<br><img src="/../img/sourceinsight/4.png" alt="4"></p></li><li><p>点击install<br><img src="/../img/sourceinsight/5.png" alt="5"></p></li><li><p>点击finish，安装完成<br><img src="/../img/sourceinsight/5.png" alt="5"></p></li></ol><h2 id="三、SourceInsight4-0绿化"><a href="#三、SourceInsight4-0绿化" class="headerlink" title="三、SourceInsight4.0绿化"></a>三、SourceInsight4.0绿化</h2><ol><li><p>复制解压路径下的msimg32.dll到安装文件夹中<br><img src="/../img/sourceinsight/7.png" alt="7"></p></li><li><p>在安装目录运行解压生成的si4_kgen_unis.exe文件，点击Generate<br><img src="/../img/sourceinsight/8.png" alt="8"><br><img src="/../img/sourceinsight/9.png" alt="9">   </p></li><li><p>弹出文件保存框，点击保存即可<br><img src="/../img/sourceinsight/10.png" alt="10">  </p></li><li><p>关闭该软件即可<br><img src="/../img/sourceinsight/11.png" alt="11">  </p></li><li><p>验证绿化是否成功（打开sourceinsight软件，有红框中的Activated就是安装并激活成功）<br><img src="/../img/sourceinsight/12.png" alt="12"></p></li></ol><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><p><a href="https://blog.csdn.net/qq_36035382/article/details/126239044">最新SourceInsight 4.0.124下载及安装教程</a>    </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Samba实现文件共享</title>
    <link href="/2025/03/04/%E4%BD%BF%E7%94%A8Samba%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    <url>/2025/03/04/%E4%BD%BF%E7%94%A8Samba%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="Samba实现文件共享"><a href="#Samba实现文件共享" class="headerlink" title="Samba实现文件共享"></a>Samba实现文件共享</h1><h2 id="一、安装samba"><a href="#一、安装samba" class="headerlink" title="一、安装samba"></a>一、安装samba</h2><h3 id="1-更新系统，确保Ubuntu系统是最新的"><a href="#1-更新系统，确保Ubuntu系统是最新的" class="headerlink" title="1. 更新系统，确保Ubuntu系统是最新的"></a>1. 更新系统，确保Ubuntu系统是最新的</h3><p><img src="/../img/samba/1.png" alt="1">      </p><h3 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2. 开始安装"></a>2. 开始安装</h3><p>执行安装命令：      </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> apt install samba samba-<span class="hljs-meta">common</span>   <br></code></pre></td></tr></table></figure><p><img src="/../img/samba/2.png" alt="2">    </p><p>安装后提示忽略以下错误，先记录一下，防止后续出问题便于排查：<br><img src="/../img/samba/3.png" alt="3">    </p><p>查看samba安装状态：    </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">samba <span class="hljs-comment">--version   </span><br></code></pre></td></tr></table></figure><p><img src="/../img/samba/4.png" alt="4">     </p><p>切换目录查看:    </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>切换工作目录到此处，并通过<span class="hljs-keyword">ls</span>命令检查目录下文件。  <br><span class="hljs-keyword">cd</span> <span class="hljs-string">/etc/samba/</span>    <br></code></pre></td></tr></table></figure><p><img src="/../img/samba/5.png" alt="5">    </p><h3 id="3-创建共享目录"><a href="#3-创建共享目录" class="headerlink" title="3.  创建共享目录"></a>3.  创建共享目录</h3><p>创建要用于共享的目录，并将其权限设置为777（任何访问者均有read,write,execute权限）    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /home/winnie/shared<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R 777 /home/winnie/shared<br><span class="hljs-built_in">ls</span> -alh<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/6.png" alt="6">   </p><h3 id="4-创建samba用户并设置密码"><a href="#4-创建samba用户并设置密码" class="headerlink" title="4. 创建samba用户并设置密码"></a>4. 创建samba用户并设置密码</h3><h3 id="5-编辑samba配置文件"><a href="#5-编辑samba配置文件" class="headerlink" title="5. 编辑samba配置文件"></a>5. 编辑samba配置文件</h3><p>Samba 的配置文件位于 &#x2F;etc&#x2F;samba&#x2F;smb.conf。通过vim打开该文件（该文件对非管理员为read-only权限，应使用sudo或以root身份访问）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/samba/<br><span class="hljs-built_in">sudo</span> vim smb.conf<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/7.png" alt="7">   </p><p>在文件尾部加上下列一段 （ <strong>注意替换为自己的用户名和共享目录路径</strong> ！）：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[share]<br><span class="hljs-attribute">path</span> <span class="hljs-operator">=</span> /home/winnie/shared<br><span class="hljs-attribute">public</span> <span class="hljs-operator">=</span> yes<br><span class="hljs-attribute">browsable</span> <span class="hljs-operator">=</span> yes<br><span class="hljs-attribute">writable</span> <span class="hljs-operator">=</span> yes<br>valid users <span class="hljs-operator">=</span> winnie<br><span class="hljs-attribute">available</span> <span class="hljs-operator">=</span> yes<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/8.png" alt="8">   </p><p>注意：<br><img src="/../img/samba/9.png" alt="9">   </p><h3 id="6-将用户添加到samba的管理系统"><a href="#6-将用户添加到samba的管理系统" class="headerlink" title="6. 将用户添加到samba的管理系统"></a>6. 将用户添加到samba的管理系统</h3><p>接下来要将用户添加到samba的管理系统中。<br>首先在&#x2F;etc&#x2F;samba目录下创建文件 smbpasswd：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /etc/samba/smbpasswd<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/10.png" alt="10">   </p><p>然后将现有的 Linux 用户 winnie 添加到 Samba 的用户列表中，并设置该用户的 Samba 密码。设置成功后将会看到 Added user XXX的提示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> smbpasswd -a winnie<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/11.png" alt="11">   </p><p>通过以下命令启用用户，确保该用户可以登录samba服务。(启动成功后会提示Enable Username)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> smbpasswd -e winnie<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/12.png" alt="12">   </p><p>修改完配置文件后，通过以下命令重启samba服务：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/smbd restart<br></code></pre></td></tr></table></figure><p><img src="/../img/samba/13.png" alt="13">   </p><p>重启服务之后测试所配置的samba（执行命令“testparm”）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">testparm</span><br></code></pre></td></tr></table></figure><p><img src="/../img/samba/14.png" alt="14">   </p><p>该命令会检查Samba配置文件语法以及逻辑上的错误，如果无错误将会显示我们的配置文件。<br>再通过smbclient的命令来再一步检查（#如果共享成功，则会要求键入密码）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">smbclient <span class="hljs-punctuation">-</span>L <span class="hljs-comment">//localhost/shared</span><br></code></pre></td></tr></table></figure><p><img src="/../img/samba/15.png" alt="15">   </p><h3 id="7-打开Windows文件管理器输入-linux的IP地址"><a href="#7-打开Windows文件管理器输入-linux的IP地址" class="headerlink" title="7. 打开Windows文件管理器输入\linux的IP地址"></a>7. 打开Windows文件管理器输入\linux的IP地址</h3><p>如下：<br><img src="/../img/samba/16.png" alt="16">   </p><p>双击文件夹，输入网络凭据（也就是我们前面添加的用户和密码）进行访问。<br><img src="/../img/samba/17.png" alt="17">   </p><p>尝试把文件复制到共享文件夹shared当中后，验证一下：<br><img src="/../img/samba/18.png" alt="18">   </p><p>成功！！！</p><h2 id="二、参考"><a href="#二、参考" class="headerlink" title="二、参考"></a>二、参考</h2><ul><li><a href="https://blog.csdn.net/R6bandito/article/details/143080904">Linux与Windows文件共享:Samba的详细配置(Ubuntu)</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown文件编译语法规则</title>
    <link href="/2025/03/04/Markdown%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
    <url>/2025/03/04/Markdown%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown文件编译语法规则"><a href="#Markdown文件编译语法规则" class="headerlink" title="Markdown文件编译语法规则"></a>Markdown文件编译语法规则</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>这是一个二级标题。Markdown使用’#’来表示标题，’#’的数量表示标题的级别，一个’#’表示一级标题，两个’#’表示二级标题，以此类推。</p><h2 id="二、字体样式"><a href="#二、字体样式" class="headerlink" title="二、字体样式"></a>二、字体样式</h2><ul><li><strong>粗体</strong>：使用2个’*’或’_’包裹文本。</li><li><em>斜体</em>：使用一个’*’或’_’包裹文本。</li><li><em><strong>加粗斜体</strong></em>：使用3个’*’或’_’包裹文本。</li><li><del>删除线</del>：使用2个’~’包裹文本。</li></ul><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><ul><li><p>无序列表：使用’-‘、’*’或’+’来表示无序列表，例如：</p><ul><li>项目一</li><li>项目二</li><li>项目三</li></ul></li><li><p>有序列表：使用数字加点来表示有序列表，例如：</p><ol><li>第一步</li><li>第二步</li><li>第三步</li></ol></li></ul><h2 id="四、链接和图片"><a href="#四、链接和图片" class="headerlink" title="四、链接和图片"></a>四、链接和图片</h2><ul><li>链接：使用<a href="https://cn.bing.com/">链接文本</a>来表示链接，例如 <a href="https://www.baidu.com/">点击这里访问百度</a></li><li>图片: 使用感叹号+中括号+小括号组合表示图片。</li></ul><h2 id="五、引用"><a href="#五、引用" class="headerlink" title="五、引用"></a>五、引用</h2><p>这是一段引用内容：</p><blockquote><p>桃李不言，下自成蹊。</p></blockquote><h2 id="六、代码块"><a href="#六、代码块" class="headerlink" title="六、代码块"></a>六、代码块</h2><ul><li>在Markdown中，代码块是通过在一行的开头添加<strong>三个反引号</strong>来定义的，并且这三个反引号需要独占一行，即它们前面和后面都不能有其他字符（包括空格和制表符）。</li><li>注意：代码块最后若没有紧接着三个反引号来结束这个代码块，Markdown解析器会继续将后续的内容视为代码块的一部分，直到它遇到另一个代码块的结束标记（如果有的话）或者文档的末尾。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="七、预览Markdown文档"><a href="#七、预览Markdown文档" class="headerlink" title="七、预览Markdown文档"></a>七、预览Markdown文档</h2><ol><li>在VSCode中，你以使用内置的预览功能来查看Markdown文件的效果。</li><li>按下Ctrl+Shift+V（Windows&#x2F;Linux）或Cmd+Shift+V（Mac）快捷键，或者在VSCode的菜单栏中点击“查看”-&gt;“预览”来打开预览窗口。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>doxygen学习与使用记录（Windows）</title>
    <link href="/2025/03/04/doxygen%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88Windows%EF%BC%89/"/>
    <url>/2025/03/04/doxygen%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88Windows%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="doxygen学习与使用记录（Windows）"><a href="#doxygen学习与使用记录（Windows）" class="headerlink" title="doxygen学习与使用记录（Windows）"></a>doxygen学习与使用记录（Windows）</h1><h2 id="一、doxygen介绍"><a href="#一、doxygen介绍" class="headerlink" title="一、doxygen介绍"></a>一、doxygen介绍</h2><p>Doxygen是一个强大的文档生成工具，能够从源代码中提取注释并生成多种格式的文档。Doxygen能够自动从代码中的注释生成API文档，支持多种编程语言（包括C、C++、java等）。开发者只需在代码中添加注释，就能轻松生成结构化的文档，提高开发效率。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><strong>1. <a href="https://www.doxygen.nl/">doxygen官网</a></strong><br><img src="/../img/doxygenLearn/doxygen.png" alt="doxygen官网下载页">  </p><p><strong>2. 进入官网后，根据系统选择对应文件下载。</strong><br>下载完成后双击.exe文件进行安装，根据提示逐步安装即可。<br><img src="/../img/doxygenLearn/install_Doxy.jpg" alt="doxygen安装"></p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>接下来尝试使用sphinx + doxygen根据源代码自动生成文档。   </p><p>Doxygen 与 Sphinx 不能直接关联，即 Sphinx 不能直接使用 Doxygen 生成的内容来生成 Sphinx 文档，它还需要一个插件来做适配，Breathe 就是为了连接 Doxygen 与 Sphinx 而生。  </p><p>要将 Doxygen 和 Sphinx 结合使用来生成文档，通常需要通过 Doxygen 生成 XML 格式的文档，然后使用 Sphinx 的 breathe 扩展将 Doxygen 生成的 XML 文件集成到 Sphinx 文档中。  </p><h3 id="1-准备所需工具"><a href="#1-准备所需工具" class="headerlink" title="1. 准备所需工具"></a>1. 准备所需工具</h3><p>使用sphinx + doxygen根据源代码自动生成文档前，需要确保已经安装以下工具：  </p><ul><li>Sphinx：用于生成和管理文档。  </li><li>Doxygen：用于从源代码生成 XML 格式的文档。  </li><li>Breathe：breathe 是Sphinx 的一个扩展，用于将 Doxygen 生成的 XML 文档与 Sphinx 集成，它允许将 Doxygen 生成的 XML 输出转换为 Sphinx 文档格式，这对于包含 C++ 代码的文档特别有用。  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># breathe扩展安装命令</span><br>pip <span class="hljs-keyword">install</span> breathe<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-创建工作目录："><a href="#2-创建工作目录：" class="headerlink" title="2. 创建工作目录："></a>2. 创建工作目录：</h3><p>新建一个独立文件夹（如Test_Code），下含2个目录（doc_project、dp_code）分别存储文档项目、项目代码。</p><h3 id="3-创建sphinx项目："><a href="#3-创建sphinx项目：" class="headerlink" title="3. 创建sphinx项目："></a>3. 创建sphinx项目：</h3><p>在doc_project目录下创建文档项目（参考“Sphinx学习与使用记录”完成该步骤）</p><h3 id="4-生成-Doxygen-配置文件"><a href="#4-生成-Doxygen-配置文件" class="headerlink" title="4. 生成 Doxygen 配置文件"></a>4. 生成 Doxygen 配置文件</h3><p>在使用 Doxygen 之前，需要为项目生成一个配置文件 Doxyfile（Doxyfile为自定义配置文件名称）。这个文件定义了 Doxygen 如何处理源代码并生成文档。 </p><p>可以通过以下命令生成一个默认的配置文件，执行该命令后，它将在当前目录下生成一个名为 Doxyfile 的配置文件，之后可以根据需要编辑该文件来定制文档的生成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">doxygen -<span class="hljs-selector-tag">g</span> Doxyfile<br></code></pre></td></tr></table></figure><h3 id="5-配置Doxygen-生成-XML-输出"><a href="#5-配置Doxygen-生成-XML-输出" class="headerlink" title="5. 配置Doxygen 生成 XML 输出"></a>5. 配置Doxygen 生成 XML 输出</h3><p>Doxygen的配置是通过Doxyfile完成的。<br>打开Doxyfile文件，并根据需要按照Doxygen的文档和示例配置文件中提供的选项进行配置。</p><p><strong>1. INPUT —— 输入文件配置：</strong><br>INPUT标记用于指定包含记录源文件的文件和&#x2F;或目录。该标记可以指定需要doxygen自动生成文档的源文件的目录文件名（如 myfile.cpp）或 目录（如 &#x2F;usr&#x2F;src&#x2F;myproject），使用空格分隔文件或目录。 <strong>注意：</strong> 如果此标记为空，则搜索当前目录。  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">例：<br><span class="hljs-comment"># 指定源代码文件目录</span><br>INPUT       =    ..<span class="hljs-regexp">/../</span>dp_code<br></code></pre></td></tr></table></figure><p><strong>2. OUTPUT_DIRECTORY —— 输出目录配置：</strong><br>OUTPUT_DIRECTORY 标记用于指定文档输出的目录，即指定生成的文档将写入的（相对或绝对）路径。<br>如果输入了相对路径，则它将相对于启动 Doxygen 的位置。如果留空，则将使用当前目录。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">例:</span><br><span class="hljs-comment"># 指定生成的文档输出到build/doxygen目录</span><br>OUTPUT_DIRECTORY        =   build/doxygen<br></code></pre></td></tr></table></figure><p><strong>3. GENERATE_HTML —— 生成 HTML 文档：</strong><br>GENERATE_HTML 标记控制是否生成 HTML 格式的文档，若该标签设置为YES，Doxygen将生成HTML输出。默认值为 YES。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 若不需要生成HMTL文件，可将该标记设置为NO</span><br><span class="hljs-attr">GENERATE_HTML</span>       =   <span class="hljs-literal">YES</span><br></code></pre></td></tr></table></figure><p><strong>4. GENERATE_LATEX —— 生成 LaTex 文档：</strong><br>GENERATE_LATEX：控制是否生成 LaTeX 格式的文档，若该标签设置为YES，Doxygen将生成LaTeX输出。默认值为 YES。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 若不需要生成LATEX文件，可将该标记设置为NO</span><br><span class="hljs-attr">GENERATE_LATEX</span>       =   <span class="hljs-literal">YES</span><br></code></pre></td></tr></table></figure><p><strong>5. GENERATE_XML——生成 XML 文档：</strong><br>如果 GENERATE_XML 标签设置为 YES，Doxygen 将生成一个 XML 文件，该文件捕获代码的结构（包括所有文档）。默认值为：NO。  </p><p><strong>要将 Doxygen 和 Sphinx 结合使用来生成文档，通常需要通过 Doxygen 生成 XML 格式的文档，然后使用 Sphinx 的 breathe 扩展将 Doxygen 生成的 XML 文件集成到 Sphinx 文档中。</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 需要生成LATEX文件，将该标记设置为YES</span><br><span class="hljs-attr">GENERATE_LATEX</span>       =   <span class="hljs-literal">YES</span><br></code></pre></td></tr></table></figure><p><strong>6. OUTPUT_DIRECTORY —— 设置doxygen文档输出目录</strong><br>OUTPUT_DIRECTORY标记用来设置doxygen根据源代码文件自动生成文档的文档输出路径。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">OUTPUT_DIRECTORY</span>        = build/doxygen<br></code></pre></td></tr></table></figure><p><strong>7. INPUT_ENCODING——设置源文件编码：</strong><br>如果源代码文件是某种特定的编码（如 GB2312），可以设置该标签。此标签可用于指定 Doxygen 解析的源文件的字符编码。Doxygen 在内部使用 UTF-8 编码。Doxygen 使用 libiconv（或 libc 内置的 iconv）进行转码。参阅 libiconv 文档（<a href="https://www.gnu.org/software/libiconv/%EF%BC%89%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%8F%AF%E8%83%BD%E7%9A%84%E7%BC%96%E7%A0%81%E5%88%97%E8%A1%A8%E3%80%82%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%BA%EF%BC%9AUTF-8%E3%80%82">https://www.gnu.org/software/libiconv/）以获取可能的编码列表。默认值为：UTF-8。</a></p><p><strong>8. DOXYFILE_ENCODING——设置配置文件编码：</strong><br>此标记指定配置文件中所有字符使用的编码。默认值为 UTF-8，这也是此标记第一次出现之前所有文本使用的编码。</p><p><strong>9. EXCLUDE——忽略特定文件：</strong><br>EXCLUDE标记指定需要排除的文件或目录。该标记可用于指定应从 INPUT 源文件中排除的文件和&#x2F;或目录。这样就可以轻松地排除INPUT指定根目录的目录树中排除子目录。<br><strong>注意：相对路径是相对于运行 Doxygen 的目录而言的。</strong></p><p><strong>10. PROJECT_NAME：项目名称。</strong><br>PROJECT_NAME 标记是一个单词（或由双引号括起来的单词序列，除非您使用 Doxywizard），用于标识生成文档的项目。此名称用于大多数生成页面的标题和其他一些地方。默认值为：My project。</p><p><strong>11. PROJECT_NUMBER：项目版本号。</strong><br>#PROJECT_NUMBER 标签可用于输入项目或修订编号。这对于存档生成的文档或使用某些版本控制系统来说可能很方便。</p><p>配置完成后，保存并关闭Doxyfile文件。</p><h3 id="6-运行-Doxygen-生成-XML-文件"><a href="#6-运行-Doxygen-生成-XML-文件" class="headerlink" title="6. 运行 Doxygen 生成 XML 文件"></a>6. 运行 Doxygen 生成 XML 文件</h3><p>使用以下命令运行 Doxygen，根据 Doxyfile 配置生成 XML 输出文件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">doxygen Doxyfile</span><br></code></pre></td></tr></table></figure><p>这会生成一个包含 XML 文档的目录（build&#x2F;doxygen），其中的 index.xml 文件即为 Doxygen 生成的 XML 文件。</p><h3 id="7-配置-Sphinx-项目"><a href="#7-配置-Sphinx-项目" class="headerlink" title="7. 配置 Sphinx 项目"></a>7. 配置 Sphinx 项目</h3><p>接下来，需要设置 Sphinx 来处理 Doxygen 生成的 XML 文件。</p><h4 id="配置-Sphinx-使用-breathe："><a href="#配置-Sphinx-使用-breathe：" class="headerlink" title="配置 Sphinx 使用 breathe："></a>配置 Sphinx 使用 breathe：</h4><ol><li><p>编辑 conf.py 文件，添加 breathe 扩展并配置 Doxygen XML 路径。在 extensions 列表中，添加 breathe 扩展：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#添加扩展</span><br><span class="hljs-attr">extensions</span> =[<span class="hljs-string">&#x27;recommonmark&#x27;</span>,<span class="hljs-string">&#x27;breathe&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>配置 breathe_projects，指定 Doxygen 生成的 XML 文件所在的路径：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#指定 Doxygen 生成的 XML 文件的输出路径</span><br>breathe_projects=&#123;<br><span class="hljs-string">&quot;myproject&quot;</span>:<span class="hljs-string">&quot;../build/doxygen/xml&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置 breathe_default_project，指定sphinx默认使用的Doxygen项目名称：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 指定 Sphinx 默认使用的 Doxygen 项目名称</span><br>breathe <span class="hljs-literal">default</span> project =<span class="hljs-string">&quot;myproject&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>配置 breathe_domain_by_extension，指定所有 .h 文件按 C 语言域解析</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 所有 .h 文件按 C 语言域解析</span><br><span class="hljs-attr">breathe_domain_by_extension</span> = &#123;<span class="hljs-string">&quot;h&quot;</span> : <span class="hljs-string">&quot;c&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="8-编写doxygen风格代码注释"><a href="#8-编写doxygen风格代码注释" class="headerlink" title="8. 编写doxygen风格代码注释"></a>8. 编写doxygen风格代码注释</h3><p>Doxygen通过解析源代码中的注释来生成文档。因此，在编写代码时，需要添加适当的注释。  </p><h4 id="利用VSCode编写"><a href="#利用VSCode编写" class="headerlink" title="利用VSCode编写"></a>利用VSCode编写</h4><p>通过使用vscode编写doxygen风格注释——需要安装Doxygen相关插件：“Doxygen Documentation Generator”  、“Doxygen”  </p><p>成功安装插件后，键盘输入&#x2F;**回车即可自动生成doxygen风格注释。<br>在注释中，使用Doxygen的特殊标记（如@brief、@param、@return等）来描述代码的功能、参数和返回值等信息。</p><h3 id="9-新建-rst文件"><a href="#9-新建-rst文件" class="headerlink" title="9. 新建.rst文件"></a>9. 新建.rst文件</h3><p>最后，我们需要做的就是 doxygen 生成的 xml 文档集成到sphinx文档项目中。  </p><h4 id="1-在source目录下新建目录并在该目录下新建-index-rst-文件，并按照breathe扩展语法编辑-index-rst-文件，比如"><a href="#1-在source目录下新建目录并在该目录下新建-index-rst-文件，并按照breathe扩展语法编辑-index-rst-文件，比如" class="headerlink" title="1. 在source目录下新建目录并在该目录下新建 index.rst 文件，并按照breathe扩展语法编辑 index.rst 文件，比如:"></a>1. 在source目录下新建目录并在该目录下新建 index.rst 文件，并按照breathe扩展语法编辑 index.rst 文件，比如:</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">我的API</span><br><span class="hljs-section">=============</span><br><br><span class="hljs-section">doxygen文档 myproject</span><br><span class="hljs-section">------------------------------------</span><br><span class="hljs-bullet">.. </span>doxygenindex::<br><span class="hljs-code">   :project: myproject</span><br><br><span class="hljs-section">源代码引用</span><br><span class="hljs-section">------------------------------------</span><br><br><span class="hljs-bullet">.. </span>literalinclude:: ../../../dp_code/thread.c<br><span class="hljs-code">   :language: c</span><br><br><br></code></pre></td></tr></table></figure><h4 id="2-可以添加以下内容来包含-Doxygen-生成的文档："><a href="#2-可以添加以下内容来包含-Doxygen-生成的文档：" class="headerlink" title="2. 可以添加以下内容来包含 Doxygen 生成的文档："></a>2. 可以添加以下内容来包含 Doxygen 生成的文档：</h4><p>（<strong>1）在index.rst中，使用Breathe指令批量导入doxygen项目所有内容：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">doxygen文档 myproject</span><br><span class="hljs-section">------------------------------------</span><br><br><span class="hljs-bullet">.. </span>doxygenindex::<br><span class="hljs-code">   :project: myproject</span><br></code></pre></td></tr></table></figure><p><strong>（2）导入相应的文件生成的文档</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">sp.h</span><br><span class="hljs-section">----</span><br><br><span class="hljs-bullet">.. </span>doxygenfile:: sp.h<br></code></pre></td></tr></table></figure><p><strong>(3)使用 reStructuredText（reST）语法来引用源文件内容</strong><br>添加引用后，Sphinx 就会在生成文档时将 thread.c 文件的内容包含进来，并且 :language: c 告诉 Sphinx 文件是 C 语言代码，适当高亮语法。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">源代码引用</span><br><span class="hljs-section">------------------------------------</span><br><br><span class="hljs-bullet">.. </span>literalinclude:: ../../../dp_code/thread.c<br><span class="hljs-code">   :language: c</span><br></code></pre></td></tr></table></figure><h3 id="10-修改index-rst文件"><a href="#10-修改index-rst文件" class="headerlink" title="10. 修改index.rst文件"></a>10. 修改index.rst文件</h3><p>将新建的DX&#x2F;index.rst文件加入到sphinx项目的index.rst文件中。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">学习Doxygen使用记录</span><br><span class="hljs-section">======================================================</span><br><br><span class="hljs-bullet">.. </span>toctree::<br><span class="hljs-code">   :maxdepth: 2</span><br><span class="hljs-code">   :caption: Contents:</span><br><br><span class="hljs-code">   DX/index.rst</span><br></code></pre></td></tr></table></figure><h3 id="11-编译运行"><a href="#11-编译运行" class="headerlink" title="11. 编译运行"></a>11. 编译运行</h3><p>编译运行并打开index.html文件，生成文档如下：<br><img src="/../img/doxygenLearn/doxyAndsphinx.png" alt="doxygen自动生成文档效果"></p><h2 id="五、参考文章"><a href="#五、参考文章" class="headerlink" title="五、参考文章"></a>五、参考文章</h2><ul><li><a href="https://cloud.baidu.com/article/3266820">使用Doxygen创建代码文档</a>  </li><li><a href="https://promisechen.github.io/doc_guide/howto.html">如何用sphinx+reST编写文档</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Beyond Compare安装记录</title>
    <link href="/2025/03/04/Beyond-Compare%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/04/Beyond-Compare%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Beyond-Compare安装记录"><a href="#Beyond-Compare安装记录" class="headerlink" title="Beyond Compare安装记录"></a>Beyond Compare安装记录</h1><h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>下载地址：链接：<a href="https://pan.baidu.com/s/1srfC8Eg2P2BlK-CmpcW_uQ">https://pan.baidu.com/s/1srfC8Eg2P2BlK-CmpcW_uQ</a><br>提取码：l31m<br><img src="/../img/beyondCompare/1.png" alt="1">   </p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>右击以管理员身份运行，傻瓜式安装，安装路径目录可以自定义，安装中选择为所有用户安装，安装完成运行软件， 找到 帮助——输入秘钥 打开<br>选择为所有用户安装，下一步：<br><img src="/../img/beyondCompare/2.png" alt="2">  </p><p>接受协议，下一步：<br><img src="/../img/beyondCompare/3.png" alt="3">  </p><p>选择安装位置，磁盘容量足够则直接下一步：<br><img src="/../img/beyondCompare/4.png" alt="4">  </p><p>下一步<br><img src="/../img/beyondCompare/5.png" alt="5">  </p><p>安装<br><img src="/../img/beyondCompare/6.png" alt="6"><br><img src="/../img/beyondCompare/7.png" alt="7">  </p><p>安装完成，运行程序：<br><img src="/../img/beyondCompare/8.png" alt="8">   </p><p>点击“注册-输入您的版本4的授权密钥”<br><img src="/../imgs/beyondCompare/9.png" alt="9">   </p><p>打开注册码文件：<br><img src="/../img/beyondCompare/10.png" alt="10">    </p><p>将密钥复制进去即可：<br><img src="/../img/beyondCompare/11.png" alt="11">  </p><p>点击确定，会弹出谢谢注册成功的会话框，找到 “帮助——关于beyondcompare” 详见下图：<br><img src="/../img/beyondCompare/12.png" alt="12">   </p><p>破解成功！</p><h2 id="三、参考："><a href="#三、参考：" class="headerlink" title="三、参考："></a>三、参考：</h2><ul><li><a href="https://blog.csdn.net/sinat_39684057/article/details/98053227">代码比较工具Beyond Compare 4</a></li><li><a href="https://blog.csdn.net/m0_57532432/article/details/140713629">【Beyond Compare】Beyond Compare下载、安装与使用详细教程</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github+hexo搭建博客详细记录</title>
    <link href="/2024/11/05/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/11/05/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>全部搭建过程参考文章：</strong><a href="https://blog.csdn.net/yaorongke/article/details/119089190"><strong>https://blog.csdn.net/yaorongke/article/details/119089190</strong></a></p><p>SSH设置：<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md</a></p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h3><h4 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1.   注册GitHub账号"></a><strong>1.</strong>   <strong>注册GitHub账号</strong></h4><p>首先需要有一个GitHub账号，没有的话到先到GitHub官网注册（<a href="https://github.com/%EF%BC%89%E3%80%82">https://github.com/）。</a></p><p>注册可参考GitHub申请账号教程<a href="https://blog.csdn.net/yaorongke/article/details/119086305">https://blog.csdn.net/yaorongke/article/details/119086305</a></p><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a><strong>2.</strong> <strong>安装Git</strong></h4><p>在自己电脑上安装好Git，hexo部署到GitHub时要用。参考 Git安装(网址：<a href="https://blog.csdn.net/yaorongke/article/details/119085413?fromshare=blogdetail&sharetype=blogdetail&sharerId=119085413&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">https://blog.csdn.net/yaorongke/article/details/119085413?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=119085413&amp;sharerefer=PC&amp;sharesource=weixin_62431476&amp;sharefrom=from_link</a>)</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image1.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image2.png" alt=" "></p><h4 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3. 安装NodeJS"></a><strong>3.</strong> <strong>安装NodeJS</strong></h4><p>在自己电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具。可参考NodeJS安装及配置(Windows)——</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119084295?fromshare=blogdetail&sharetype=blogdetail&sharerId=119084295&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">https://blog.csdn.net/yaorongke/article/details/119084295?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=119084295&amp;sharerefer=PC&amp;sharesource=weixin_62431476&amp;sharefrom=from_link</a></p><p>我的安装具体步骤：</p><h5 id="（1）下载安装包"><a href="#（1）下载安装包" class="headerlink" title="（1）下载安装包"></a><strong>（1）下载安装包</strong></h5><p>NodeJS官网下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image3.png" alt=" "><br>下载安装包后双击安装包开始安装，一路点击Next即可，安装完成后，msi格式的安装包会自动添加环境变量。</p><p>安装finish后打开cmd，执行命令node -v查看node版本</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image4.png" alt=" "></p><p>在安装node的同时也安装了npm，执行 npm -v 查看npm版本</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image5.png" alt=" "></p><p>成功查看后就安装完成可以正常使用了，参考文章内还有讲解修改全局包配置，但我不需要这个所以省略后半部分，有需要可访问步骤3的网址。</p><h3 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a><strong>二、创建仓库</strong></h3><p><strong>1.</strong> 在GitHub上<strong>创建一个新的代码仓库</strong>用于保存我们的网页。点击<strong>Your repositories</strong>，进入仓库页面。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image6.png" alt=" "><br><strong>2.</strong> <strong>点击New</strong>按钮，进入仓库创建页面。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/7.png" alt=" "></p><p><strong>3.</strong> <strong>填写仓库名</strong>（必须与用户名一致），格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/8.png" alt=" "></p><p> <strong>4.</strong> <strong>点击creating a new file</strong>创建一个新文件，作为我们网站的主页。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/9.png" alt=" "><br><strong>5.</strong> <strong>新文件的名字必须为index.html</strong>，内容先随便写一个简单的，填写之后点击Commit new file提交。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/10.png" alt=" "><br>填写内容示例如下：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/11.png" alt=" "><br><strong>6.</strong> 在仓库页面，从上方导航栏<strong>进入“Settings”-“Pages”</strong>,找到主页的地址，示例为 <a href="https://yaorongke.github.io/">https://yaorongke.github.io/</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/12.png" alt=" "><br><strong>7.</strong> 接下来直接访问查询到的主页地址<a href="https://yaorongke.github.io/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E6%AF%94%E8%BE%83%E7%AE%80%E9%99%8B%E7%9A%84%E7%BD%91%E9%A1%B5%EF%BC%9A">https://yaorongke.github.io/，可以看到一个比较简陋的网页：</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/13.png" alt=" "></p><h3 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a><strong>三、安装Hexo</strong></h3><p>Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。Hexo官网<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h4 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.   安装hexo"></a><strong>1.</strong>   <strong>安装hexo</strong></h4><p>注意，<strong>第一个坑来了！</strong>——自行创建一个WorkSpace-blog目录，在该目录下安装hexo，安装hexo命令以官网为准npm install hexo-cli -g，参考文章内的命令不知道为啥不可用，归结为坑（bushi）</p><p><code>npm install hexo-cli -g</code></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/14.png" alt=" "></p><ol start="2"><li>安装成功后查看版本</li></ol><p><code>hexo -v</code></p><ol start="3"><li>创建一个项目 hexo-blog 并初始化，</li></ol><p><code>hexo init blog</code></p><p><code>cd blog</code></p><p><code>npm install</code></p><ol start="4"><li>本地启动</li></ol><p><code>hexo g</code></p><p><code>hexo server</code></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/15.png" alt=" "><br>这里有个踩过的坑：</p><p>启动失败了，原因是<strong>4000端口被占用</strong>，使用hexo s -p 8080命令<strong>更换端口</strong>.( 启动时需要在hexo-blog目录下)以自己的目录为准。</p><p>​                 更换为8080端口即可成功启动                </p><p>​                 启动失败，4000端口被占用                </p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/16.png" alt=" "></p><h3 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a><strong>四、更换主题</strong></h3><h4 id="1-下载Fluid主题"><a href="#1-下载Fluid主题" class="headerlink" title="1. 下载Fluid主题"></a><strong>1.</strong> 下载Fluid主题</h4><p>  进入<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a>安装主题，<strong>点击“最新 release 版本”</strong>下滑找到<strong>“Assets”</strong>部分。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/17.png" alt=" "></p><p>下载压缩包并解压到 “hexo-blog” – “themes” 目录，并将解压出的文件夹<strong>重命名为 fluid</strong><br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/18.png" alt=" "></p><h4 id="2-指定主题"><a href="#2-指定主题" class="headerlink" title="2.   指定主题"></a><strong>2.</strong>   <strong>指定主题</strong></h4><p>如下修改hexo-blog目录中的 _config.yml文件的them和language（用vscode软件打开hexo-blog目录会非常好修改，后续需要执行的命令行也可以直接在vscode终端执行）：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/19.png" alt=" "></p><p>我的vscode修改界面：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/20.png" alt=" "></p><ol start="3"><li><h4 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a><strong>创建「关于页」</strong></h4></li></ol><p>首次使用主题的「关于页」需要<strong>手动创建</strong>：</p><p><code>hexo new page about</code></p><p>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，<strong>添加 layout 属性</strong>。</p><p>修改后的文件示例如下：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/21.png" alt=" "></p><h3 id="五、发布到GitHub-Pages"><a href="#五、发布到GitHub-Pages" class="headerlink" title="五、发布到GitHub Pages"></a><strong>五、发布到GitHub Pages</strong></h3><h4 id="1-安装hexo-deployer-git"><a href="#1-安装hexo-deployer-git" class="headerlink" title="1.   安装hexo-deployer-git"></a><strong>1.</strong>   <strong>安装hexo-deployer-git</strong></h4><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/22.png" alt=" "></p><h4 id="2-修改-hexo-blog目录下的config-yml，配置-GitHub-相关信息"><a href="#2-修改-hexo-blog目录下的config-yml，配置-GitHub-相关信息" class="headerlink" title="2.  修改 hexo-blog目录下的config.yml，配置 GitHub 相关信息"></a><strong>2.</strong>  <strong>修改 hexo-blog目录下的config.yml，配置 GitHub 相关信息</strong></h4><p>坑！</p><p>配置.yml文件时，<strong>注意空格！！！</strong>否则报错</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/23.png" alt=" "></p><p>接下来两个推送方式：</p><p>（1）参考文章内（如下）的配置方式部署不知道为什么一直没成功，放弃了。。。。。<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/24.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/25.png" alt=" "><br>这个问题暂时没解决，推送换了ssh连接</p><p>（2）换成ssh推送继续往下肝，这里开始参考开头提到的第二篇文章：[**<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md**]">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md**]</a>(<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo</a> %2B github搭建个人博客教程.md)</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/26.png" alt=" "><br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/27.png" alt=" "><br>以上步骤非常清晰，浅提几个点：</p><p>l  一开始没有.ssh目录，执行了命令ssh-keygen -t rsa -C “my email”命令，这里我是在c:&#x2F;用户&#x2F;username&#x2F;目录下执行的，生成完成后用记事本打开id_ras.pub文件，然后Ctrl-A复制所有内容。</p><p>l  接下来的github-&gt;头像-&gt;Settings→SSH kyes→Add SSH key，粘贴复制的内容。对应图片放这里：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/28.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/29.png" alt=" "></p><p>l  最后的url配置的就是步骤二-7中的主页地址</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/30.png" alt=" "></p><p>l  repo的内容在仓库页面-code-SSH可以直接复制<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/31.png" alt=" "></p><p>l  全部修改完配置保存后执行hexo g -d，部署完成后就可以打开主页：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/32.png" alt=" "></p><h4 id="3-修改-default分支"><a href="#3-修改-default分支" class="headerlink" title="3.  修改 default分支"></a><strong>3.</strong>  <strong>修改 default分支</strong></h4><p>又是一个坑人的小可爱<br>一开始发布文章后在主页看不到文章————GitHub发布page默认是master分支，但现在主页展示的是main分支推送的文章，所以我们就把default切换为了master<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image8.png" alt=" "></p><p>再附上之前My cute ie家族引路人 在9月份配置时记录下的其他注意事项和链接！<br>Jessie’s channel————<a href="https://chenjessiee.github.io/2024/09/12/%E6%9C%80%E8%BF%91%E7%9A%84%E6%89%93%E7%AE%97/">https://chenjessiee.github.io/2024/09/12/%E6%9C%80%E8%BF%91%E7%9A%84%E6%89%93%E7%AE%97/</a></p><ol><li>Node下载，注意看是否直接下载安装程序，压缩包还不会使用。</li><li>在npm运行，就是Node，下载好了cmd到folder，执行npm命令就行。</li><li>注意.ignore文件，否则上传一大堆。</li><li>github分支很重要，默认执行分支main，这就会出现部署到master分支，本地能成功执行hexo，但是github访问不到，去setting切换分支即可。</li><li>github pages没有实时更改内容是很正常的，发布前先<code>hexo s -p 8080</code>，本地执行没问题，先使用 <code>hexo clean</code> 清除本地缓存，然后<code>hexo g -d</code>提交。</li><li>新建文章很简单，<code>hexo new name</code> 即可。</li><li>发布照片时，要把生成的照片文件夹放到source下的img静态资源文件夹，养成良好习惯，放在post里面无法访问。</li><li>切换master为default时在setting内设置即可（苦苦回忆终于找到入口haha!）<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image7.png" alt=" "></li></ol><p>以上是在把winnie引入ie家族的元老Jessie的技术支持下进行首次搭建配置时遇到各种的坑坑，开启blog也是在昨晚Cute girl Jessie向我发出邀请，今天捣鼓了一天，在Jessie的大力支持和帮助下发出了第一篇bolg，今天正式拥有自己的blog了！</p><p><strong>Winnie遇到Jessie大概就像两个小行星跨越好多光年后终于交汇到一起。</strong><br><strong>2024.10.26的下午是个晴天，写下这些恰好在能看见星星的夜晚，那就以这样的方式把她们的相遇写在秋天。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/05/hello-world/"/>
    <url>/2024/11/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
